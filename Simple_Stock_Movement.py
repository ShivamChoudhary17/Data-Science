{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Google_Stock.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNN+iRRTLKcBu80kDLxKZL0"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "q4feyyDPdV62"
      },
      "source": [
        "#Description: Use stock indecators with machine learning to pridict the direction of stok's price"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B91bjDzid1FB"
      },
      "source": [
        "#Import Libreries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "FsWNHvV5eJRA",
        "outputId": "ef8132a1-114d-412a-8c30-96a986f1c547"
      },
      "source": [
        "#Load dataset \n",
        "from google.colab import files\n",
        "files.upload()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-835421fa-9f0b-4bd1-9438-677c0bbb8c80\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-835421fa-9f0b-4bd1-9438-677c0bbb8c80\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving GOOG.csv to GOOG.csv\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'GOOG.csv': b'Date,Open,High,Low,Close,Adj Close,Volume\\n2020-06-15,1390.800049,1424.800049,1387.920044,1419.849976,1419.849976,1503900\\n2020-06-16,1445.219971,1455.020020,1425.900024,1442.719971,1442.719971,1709200\\n2020-06-17,1447.160034,1460.000000,1431.380005,1451.119995,1451.119995,1549600\\n2020-06-18,1449.160034,1451.410034,1427.010010,1435.959961,1435.959961,1581900\\n2020-06-19,1444.000000,1447.800049,1421.349976,1431.719971,1431.719971,3157900\\n2020-06-22,1429.000000,1452.750000,1423.209961,1451.859985,1451.859985,1542400\\n2020-06-23,1455.640015,1475.941040,1445.239990,1464.410034,1464.410034,1429800\\n2020-06-24,1461.510010,1475.420044,1429.750000,1431.969971,1431.969971,1756000\\n2020-06-25,1429.900024,1442.900024,1420.000000,1441.329956,1441.329956,1230500\\n2020-06-26,1431.390015,1433.449951,1351.989990,1359.900024,1359.900024,4267700\\n2020-06-29,1358.180054,1395.599976,1347.010010,1394.969971,1394.969971,1810200\\n2020-06-30,1390.439941,1418.650024,1383.959961,1413.609985,1413.609985,2042400\\n2020-07-01,1411.099976,1443.000000,1409.819946,1438.040039,1438.040039,1775200\\n2020-07-02,1446.939941,1482.949951,1446.420044,1464.699951,1464.699951,1859100\\n2020-07-06,1480.060059,1506.589966,1472.859985,1495.699951,1495.699951,1564000\\n2020-07-07,1490.000000,1516.800049,1483.550049,1485.180054,1485.180054,1458200\\n2020-07-08,1494.319946,1505.880005,1485.630005,1496.000000,1496.000000,1249700\\n2020-07-09,1506.449951,1522.719971,1488.084961,1510.989990,1510.989990,1423300\\n2020-07-10,1506.150024,1543.829956,1496.540039,1541.739990,1541.739990,1856300\\n2020-07-13,1550.000000,1577.131958,1505.243042,1511.339966,1511.339966,1846400\\n2020-07-14,1490.310059,1522.949951,1483.500000,1520.579956,1520.579956,1585000\\n2020-07-15,1523.130005,1535.329956,1498.000000,1513.640015,1513.640015,1610700\\n2020-07-16,1500.000000,1518.689941,1486.310059,1518.000000,1518.000000,1519300\\n2020-07-17,1521.619995,1523.439941,1498.420044,1515.550049,1515.550049,1456700\\n2020-07-20,1515.260010,1570.290039,1503.599976,1565.719971,1565.719971,1557300\\n2020-07-21,1586.989990,1586.989990,1554.280029,1558.420044,1558.420044,1216200\\n2020-07-22,1560.500000,1570.000000,1546.099976,1568.489990,1568.489990,932000\\n2020-07-23,1566.969971,1571.869995,1507.391968,1515.680054,1515.680054,1627600\\n2020-07-24,1498.930054,1517.635986,1488.400024,1511.869995,1511.869995,1544000\\n2020-07-27,1515.599976,1540.969971,1515.209961,1530.199951,1530.199951,1246000\\n2020-07-28,1525.180054,1526.479980,1497.660034,1500.339966,1500.339966,1702200\\n2020-07-29,1506.319946,1531.251953,1501.329956,1522.020020,1522.020020,1106500\\n2020-07-30,1497.000000,1537.869995,1492.219971,1531.449951,1531.449951,1671400\\n2020-07-31,1505.010010,1508.949951,1454.030029,1482.959961,1482.959961,3439900\\n2020-08-03,1486.640015,1490.469971,1465.640015,1474.449951,1474.449951,2330200\\n2020-08-04,1476.569946,1485.560059,1458.650024,1464.969971,1464.969971,1903500\\n2020-08-05,1469.300049,1482.410034,1463.459961,1473.609985,1473.609985,1979500\\n2020-08-06,1471.750000,1502.390015,1466.000000,1500.099976,1500.099976,1995400\\n2020-08-07,1500.000000,1516.844971,1481.640015,1494.489990,1494.489990,1577800\\n2020-08-10,1487.180054,1504.074951,1473.079956,1496.099976,1496.099976,1289300\\n2020-08-11,1492.439941,1510.000000,1478.000000,1480.319946,1480.319946,1454400\\n2020-08-12,1485.579956,1512.385986,1485.250000,1506.619995,1506.619995,1437000\\n2020-08-13,1510.339966,1537.250000,1508.005005,1518.449951,1518.449951,1455200\\n2020-08-14,1515.660034,1521.900024,1502.880005,1507.729980,1507.729980,1354800\\n2020-08-17,1514.670044,1525.609985,1507.969971,1517.979980,1517.979980,1378300\\n2020-08-18,1526.180054,1562.469971,1523.709961,1558.599976,1558.599976,2027100\\n2020-08-19,1553.310059,1573.680054,1543.949951,1547.530029,1547.530029,1660600\\n2020-08-20,1543.449951,1585.869995,1538.199951,1581.750000,1581.750000,1706900\\n2020-08-21,1577.030029,1597.719971,1568.005005,1580.420044,1580.420044,1446500\\n2020-08-24,1593.979980,1614.170044,1580.569946,1588.199951,1588.199951,1409900\\n2020-08-25,1582.069946,1611.619995,1582.069946,1608.219971,1608.219971,2247100\\n2020-08-26,1608.000000,1659.219971,1603.599976,1652.380005,1652.380005,3993400\\n2020-08-27,1653.680054,1655.000000,1625.750000,1634.329956,1634.329956,1861600\\n2020-08-28,1633.489990,1647.170044,1630.750000,1644.410034,1644.410034,1499000\\n2020-08-31,1647.890015,1647.964966,1630.310059,1634.180054,1634.180054,1823400\\n2020-09-01,1636.630005,1665.729980,1632.219971,1660.709961,1660.709961,1825300\\n2020-09-02,1673.775024,1733.180054,1666.329956,1728.280029,1728.280029,2511200\\n2020-09-03,1709.713989,1709.713989,1615.060059,1641.839966,1641.839966,3107800\\n2020-09-04,1624.260010,1645.109985,1547.613037,1591.040039,1591.040039,2608600\\n2020-09-08,1533.510010,1563.864990,1528.010010,1532.390015,1532.390015,2610900\\n2020-09-09,1557.530029,1569.000000,1536.051025,1556.959961,1556.959961,1774700\\n2020-09-10,1560.640015,1584.081055,1525.805054,1532.020020,1532.020020,1618600\\n2020-09-11,1536.000000,1575.199951,1497.359985,1520.719971,1520.719971,1597100\\n2020-09-14,1539.005005,1564.000000,1515.739990,1519.280029,1519.280029,1696600\\n2020-09-15,1536.000000,1559.569946,1531.834961,1541.439941,1541.439941,1331100\\n2020-09-16,1555.540039,1562.000000,1519.819946,1520.900024,1520.900024,1311700\\n2020-09-17,1496.000000,1508.297974,1470.000000,1495.530029,1495.530029,1879800\\n2020-09-18,1498.010010,1503.003052,1437.130005,1459.989990,1459.989990,3103900\\n2020-09-21,1440.060059,1448.359985,1406.550049,1431.160034,1431.160034,2888800\\n2020-09-22,1450.089966,1469.520020,1434.530029,1465.459961,1465.459961,1583200\\n2020-09-23,1458.780029,1460.959961,1407.699951,1415.209961,1415.209961,1657400\\n2020-09-24,1411.030029,1443.708984,1409.849976,1428.290039,1428.290039,1450200\\n2020-09-25,1432.630005,1450.000000,1413.339966,1444.959961,1444.959961,1323000\\n2020-09-28,1474.209961,1476.800049,1449.301025,1464.520020,1464.520020,2007900\\n2020-09-29,1470.390015,1476.662964,1458.805054,1469.329956,1469.329956,978200\\n2020-09-30,1466.800049,1489.750000,1459.880005,1469.599976,1469.599976,1701600\\n2020-10-01,1484.270020,1499.040039,1479.209961,1490.089966,1490.089966,1779500\\n2020-10-02,1462.030029,1483.199951,1450.920044,1458.420044,1458.420044,1284100\\n2020-10-05,1466.209961,1488.209961,1464.270020,1486.020020,1486.020020,1113300\\n2020-10-06,1475.579956,1486.760010,1448.589966,1453.439941,1453.439941,1245400\\n2020-10-07,1464.290039,1468.959961,1436.000000,1460.290039,1460.290039,1746200\\n2020-10-08,1465.089966,1490.000000,1465.089966,1485.930054,1485.930054,1187800\\n2020-10-09,1494.699951,1516.520020,1489.449951,1515.219971,1515.219971,1435300\\n2020-10-12,1543.000000,1593.859985,1532.569946,1569.150024,1569.150024,2482600\\n2020-10-13,1583.729980,1590.000000,1563.199951,1571.680054,1571.680054,1601000\\n2020-10-14,1578.589966,1587.683960,1550.530029,1568.079956,1568.079956,1929300\\n2020-10-15,1547.150024,1575.104980,1545.030029,1559.130005,1559.130005,1540000\\n2020-10-16,1565.849976,1581.130005,1563.000000,1573.010010,1573.010010,1434700\\n2020-10-19,1580.459961,1588.150024,1528.000000,1534.609985,1534.609985,1607100\\n2020-10-20,1527.050049,1577.500000,1525.670044,1555.930054,1555.930054,2241700\\n2020-10-21,1573.329956,1618.729980,1571.630005,1593.310059,1593.310059,2568300\\n2020-10-22,1593.050049,1621.989990,1585.000000,1615.329956,1615.329956,1433600\\n2020-10-23,1626.069946,1642.359985,1620.510010,1641.000000,1641.000000,1375800\\n2020-10-26,1625.010010,1638.239990,1576.500000,1590.449951,1590.449951,1853300\\n2020-10-27,1595.670044,1606.844971,1582.780029,1604.260010,1604.260010,1229000\\n2020-10-28,1559.739990,1561.349976,1514.619995,1516.619995,1516.619995,1834000\\n2020-10-29,1522.359985,1593.709961,1522.239990,1567.239990,1567.239990,2003100\\n2020-10-30,1672.109985,1687.000000,1604.459961,1621.010010,1621.010010,4329100\\n2020-11-02,1628.160034,1660.770020,1616.030029,1626.030029,1626.030029,2535400\\n2020-11-03,1631.780029,1661.699951,1616.619995,1650.209961,1650.209961,1661700\\n2020-11-04,1710.280029,1771.364990,1706.030029,1749.130005,1749.130005,3570900\\n2020-11-05,1781.000000,1793.640015,1750.510010,1763.369995,1763.369995,2065800\\n2020-11-06,1753.949951,1772.430054,1740.349976,1761.750000,1761.750000,1660900\\n2020-11-09,1790.900024,1818.060059,1760.020020,1763.000000,1763.000000,2268300\\n2020-11-10,1731.089966,1763.000000,1717.300049,1740.390015,1740.390015,2636100\\n2020-11-11,1750.000000,1764.219971,1747.364990,1752.709961,1752.709961,1264000\\n2020-11-12,1747.630005,1768.270020,1745.599976,1749.839966,1749.839966,1247500\\n2020-11-13,1757.630005,1781.040039,1744.550049,1777.020020,1777.020020,1499900\\n2020-11-16,1771.699951,1799.069946,1767.689941,1781.380005,1781.380005,1246800\\n2020-11-17,1776.939941,1785.000000,1767.000000,1770.150024,1770.150024,1147100\\n2020-11-18,1765.229980,1773.469971,1746.140015,1746.780029,1746.780029,1173500\\n2020-11-19,1738.380005,1769.589966,1737.005005,1763.920044,1763.920044,1249900\\n2020-11-20,1765.209961,1774.000000,1741.859985,1742.189941,1742.189941,2313500\\n2020-11-23,1749.599976,1753.900024,1717.719971,1734.859985,1734.859985,2161600\\n2020-11-24,1730.500000,1771.599976,1727.689941,1768.880005,1768.880005,1578000\\n2020-11-25,1772.890015,1778.540039,1756.540039,1771.430054,1771.430054,1045800\\n2020-11-27,1773.089966,1804.000000,1772.439941,1793.189941,1793.189941,884900\\n2020-11-30,1781.183960,1788.064941,1755.000000,1760.739990,1760.739990,1823800\\n2020-12-01,1774.369995,1824.829956,1769.369995,1798.099976,1798.099976,1736900\\n2020-12-02,1798.099976,1835.650024,1789.473022,1827.949951,1827.949951,1222000\\n2020-12-03,1824.010010,1847.199951,1822.650024,1826.770020,1826.770020,1227300\\n2020-12-04,1824.520020,1833.160034,1816.989990,1827.989990,1827.989990,1378200\\n2020-12-07,1819.000000,1832.369995,1805.780029,1819.479980,1819.479980,1320900\\n2020-12-08,1810.099976,1821.900024,1796.204956,1818.550049,1818.550049,1096300\\n2020-12-09,1812.010010,1834.270020,1767.810059,1784.130005,1784.130005,1507600\\n2020-12-10,1769.800049,1781.310059,1740.319946,1775.329956,1775.329956,1362800\\n2020-12-11,1763.060059,1784.449951,1760.000000,1781.770020,1781.770020,1220700\\n2020-12-14,1775.000000,1797.390015,1757.214966,1760.060059,1760.060059,1600200\\n2020-12-15,1764.420044,1771.420044,1749.949951,1767.770020,1767.770020,1482300\\n2020-12-16,1772.880005,1773.000000,1756.079956,1763.000000,1763.000000,1513500\\n2020-12-17,1768.510010,1771.784058,1738.660034,1747.900024,1747.900024,1624700\\n2020-12-18,1754.180054,1755.109985,1720.219971,1731.010010,1731.010010,4016400\\n2020-12-21,1713.510010,1740.849976,1699.000000,1739.369995,1739.369995,1828400\\n2020-12-22,1734.430054,1737.405029,1712.574951,1723.500000,1723.500000,936700\\n2020-12-23,1728.109985,1747.989990,1725.040039,1732.380005,1732.380005,1033800\\n2020-12-24,1735.000000,1746.000000,1729.109985,1738.849976,1738.849976,346800\\n2020-12-28,1751.635010,1790.728027,1746.334961,1776.089966,1776.089966,1393000\\n2020-12-29,1787.790039,1792.439941,1756.089966,1758.719971,1758.719971,1299400\\n2020-12-30,1762.010010,1765.094971,1725.599976,1739.520020,1739.520020,1306100\\n2020-12-31,1735.420044,1758.930054,1735.420044,1751.880005,1751.880005,1011900\\n2021-01-04,1757.540039,1760.650024,1707.849976,1728.239990,1728.239990,1901900\\n2021-01-05,1725.000000,1747.670044,1718.015015,1740.920044,1740.920044,1145300\\n2021-01-06,1702.630005,1748.000000,1699.000000,1735.290039,1735.290039,2602100\\n2021-01-07,1740.060059,1788.400024,1737.050049,1787.250000,1787.250000,2265000\\n2021-01-08,1787.979980,1809.839966,1773.535034,1807.209961,1807.209961,2050600\\n2021-01-11,1786.069946,1794.314941,1760.520020,1766.719971,1766.719971,1209700\\n2021-01-12,1753.920044,1778.040039,1725.310059,1746.550049,1746.550049,1357000\\n2021-01-13,1738.579956,1765.035034,1738.010010,1754.400024,1754.400024,1094100\\n2021-01-14,1753.619995,1775.010010,1733.400024,1740.180054,1740.180054,1179500\\n2021-01-15,1738.189941,1756.000000,1721.550049,1736.189941,1736.189941,1342200\\n2021-01-19,1752.250000,1809.275024,1741.459961,1790.859985,1790.859985,1734600\\n2021-01-20,1831.459961,1903.709961,1825.530029,1886.900024,1886.900024,2490300\\n2021-01-21,1898.000000,1934.859985,1887.109985,1891.250000,1891.250000,2063900\\n2021-01-22,1895.680054,1910.949951,1881.760010,1901.050049,1901.050049,1272100\\n2021-01-25,1920.670044,1929.579956,1867.530029,1899.400024,1899.400024,1927300\\n2021-01-26,1888.839966,1925.000000,1884.244995,1917.239990,1917.239990,1313100\\n2021-01-27,1882.530029,1890.000000,1809.000000,1830.790039,1830.790039,2748300\\n2021-01-28,1843.939941,1898.829956,1842.640015,1863.109985,1863.109985,1773100\\n2021-01-29,1846.170044,1857.280029,1810.199951,1835.739990,1835.739990,1612600\\n2021-02-01,1853.569946,1922.391968,1850.930054,1901.349976,1901.349976,1602200\\n2021-02-02,1922.560059,1955.760010,1914.489990,1927.510010,1927.510010,2273700\\n2021-02-03,2073.000000,2116.500000,2018.380005,2070.070068,2070.070068,4118200\\n2021-02-04,2068.889893,2078.550049,2042.589966,2062.370117,2062.370117,1852300\\n2021-02-05,2070.000000,2102.510010,2059.330078,2098.000000,2098.000000,1535100\\n2021-02-08,2105.909912,2123.547119,2072.000000,2092.909912,2092.909912,1241900\\n2021-02-09,2078.540039,2105.129883,2078.540039,2083.510010,2083.510010,889900\\n2021-02-10,2094.209961,2108.370117,2063.090088,2095.379883,2095.379883,1135500\\n2021-02-11,2099.510010,2102.030029,2077.320068,2095.889893,2095.889893,945700\\n2021-02-12,2090.250000,2108.820068,2083.129883,2104.110107,2104.110107,855700\\n2021-02-16,2104.360107,2152.679932,2104.360107,2121.899902,2121.899902,1133800\\n2021-02-17,2100.000000,2133.659912,2098.919922,2128.310059,2128.310059,1070900\\n2021-02-18,2110.389893,2132.735107,2103.709961,2117.199951,2117.199951,1121600\\n2021-02-19,2119.270020,2130.530029,2097.409912,2101.139893,2101.139893,1457400\\n2021-02-22,2067.000000,2091.419922,2062.139893,2064.879883,2064.879883,1367500\\n2021-02-23,2025.010010,2082.010010,2002.020020,2070.860107,2070.860107,1667400\\n2021-02-24,2041.829956,2100.780029,2038.130005,2095.169922,2095.169922,1248300\\n2021-02-25,2067.449951,2094.879883,2021.290039,2031.359985,2031.359985,1828400\\n2021-02-26,2050.520020,2071.010010,2016.060059,2036.859985,2036.859985,2083500\\n2021-03-01,2056.520020,2086.520020,2046.099976,2081.510010,2081.510010,1404500\\n2021-03-02,2076.189941,2104.370117,2071.260010,2075.840088,2075.840088,1134600\\n2021-03-03,2067.209961,2088.518066,2010.000000,2026.709961,2026.709961,1484200\\n2021-03-04,2023.369995,2089.239990,2020.270020,2049.090088,2049.090088,2118000\\n2021-03-05,2073.120117,2118.110107,2046.415039,2108.540039,2108.540039,2195200\\n2021-03-08,2101.129883,2128.810059,2021.609985,2024.170044,2024.170044,1647400\\n2021-03-09,2070.000000,2078.040039,2047.829956,2052.699951,2052.699951,1697300\\n2021-03-10,2071.760010,2075.000000,2033.369995,2055.030029,2055.030029,1268600\\n2021-03-11,2074.060059,2125.699951,2072.379883,2114.770020,2114.770020,1239100\\n2021-03-12,2085.000000,2090.260010,2047.550049,2061.919922,2061.919922,1725800\\n2021-03-15,2062.300049,2067.060059,2043.510010,2066.489990,2066.489990,1298100\\n2021-03-16,2078.989990,2123.560059,2070.000000,2092.520020,2092.520020,1491600\\n2021-03-17,2076.030029,2109.780029,2054.000000,2091.080078,2091.080078,1299000\\n2021-03-18,2061.000000,2075.500000,2033.550049,2036.219971,2036.219971,1361400\\n2021-03-19,2042.050049,2053.100098,2017.680054,2043.199951,2043.199951,2314900\\n2021-03-22,2041.839966,2057.989990,2026.069946,2038.589966,2038.589966,1954800\\n2021-03-23,2051.699951,2072.302002,2039.219971,2052.959961,2052.959961,1367000\\n2021-03-24,2065.370117,2078.209961,2041.555054,2045.060059,2045.060059,1154000\\n2021-03-25,2044.810059,2058.870117,2010.729980,2044.359985,2044.359985,1418900\\n2021-03-26,2038.859985,2050.989990,2014.020020,2035.550049,2035.550049,1493500\\n2021-03-29,2027.880005,2058.429932,2015.619995,2055.949951,2055.949951,1229800\\n2021-03-30,2057.629883,2070.780029,2044.030029,2055.540039,2055.540039,1036600\\n2021-03-31,2059.120117,2093.326904,2056.745117,2068.629883,2068.629883,1459900\\n2021-04-01,2097.949951,2142.939941,2096.889893,2137.750000,2137.750000,1699000\\n2021-04-05,2152.939941,2237.310059,2151.620117,2225.550049,2225.550049,2164900\\n2021-04-06,2222.500000,2237.659912,2214.800049,2224.750000,2224.750000,1353000\\n2021-04-07,2226.129883,2255.000000,2225.330078,2249.679932,2249.679932,1289900\\n2021-04-08,2277.959961,2284.004883,2257.679932,2265.439941,2265.439941,1358300\\n2021-04-09,2256.699951,2289.040039,2253.714111,2285.879883,2285.879883,1044400\\n2021-04-12,2266.250000,2275.320068,2238.465088,2254.790039,2254.790039,1565900\\n2021-04-13,2261.469971,2277.209961,2256.090088,2267.270020,2267.270020,1165500\\n2021-04-14,2275.159912,2277.989990,2249.189941,2254.840088,2254.840088,1011000\\n2021-04-15,2276.979980,2306.596924,2266.000000,2296.659912,2296.659912,1373600\\n2021-04-16,2303.000000,2306.439941,2284.449951,2297.760010,2297.760010,1129800\\n2021-04-19,2291.979980,2318.449951,2287.844971,2302.399902,2302.399902,1234400\\n2021-04-20,2307.889893,2309.600098,2271.709961,2293.629883,2293.629883,1088700\\n2021-04-21,2285.250000,2295.320068,2258.570068,2293.290039,2293.290039,1196500\\n2021-04-22,2293.229980,2303.761963,2256.449951,2267.919922,2267.919922,1054800\\n2021-04-23,2283.469971,2325.820068,2278.209961,2315.300049,2315.300049,1433500\\n2021-04-26,2319.929932,2341.260010,2313.840088,2326.739990,2326.739990,1041700\\n2021-04-27,2336.000000,2337.449951,2304.270020,2307.120117,2307.120117,1598600\\n2021-04-28,2407.145020,2452.377930,2374.850098,2379.909912,2379.909912,2986400\\n2021-04-29,2410.330078,2436.520020,2402.280029,2429.889893,2429.889893,1977700\\n2021-04-30,2404.489990,2427.139893,2402.159912,2410.120117,2410.120117,1957100\\n2021-05-03,2402.719971,2419.699951,2384.500000,2395.169922,2395.169922,1689400\\n2021-05-04,2369.739990,2379.260010,2311.699951,2354.250000,2354.250000,1756000\\n2021-05-05,2368.419922,2382.199951,2351.409912,2356.739990,2356.739990,1090300\\n2021-05-06,2350.639893,2382.709961,2342.337891,2381.350098,2381.350098,1030900\\n2021-05-07,2400.000000,2416.409912,2390.000000,2398.689941,2398.689941,1163600\\n2021-05-10,2374.889893,2378.000000,2334.729980,2341.659912,2341.659912,1300300\\n2021-05-11,2291.860107,2322.000000,2283.000000,2308.760010,2308.760010,1605500\\n2021-05-12,2261.709961,2285.370117,2230.050049,2239.080078,2239.080078,1746700\\n2021-05-13,2261.090088,2276.601074,2242.719971,2261.969971,2261.969971,1333500\\n2021-05-14,2291.830078,2321.139893,2283.320068,2316.159912,2316.159912,1331200\\n2021-05-17,2309.320068,2323.340088,2295.000000,2321.409912,2321.409912,992100\\n2021-05-18,2336.906006,2343.149902,2303.159912,2303.429932,2303.429932,865100\\n2021-05-19,2264.399902,2316.760010,2263.520020,2308.709961,2308.709961,967500\\n2021-05-20,2328.040039,2360.340088,2321.090088,2356.090088,2356.090088,1191600\\n2021-05-21,2365.989990,2369.000000,2342.370117,2345.100098,2345.100098,1141600\\n2021-05-24,2367.000000,2418.479980,2360.110107,2406.669922,2406.669922,1062200\\n2021-05-25,2420.000000,2432.889893,2402.989990,2409.070068,2409.070068,941900\\n2021-05-26,2412.834961,2442.944092,2412.514893,2433.530029,2433.530029,1092800\\n2021-05-27,2436.939941,2440.000000,2402.000000,2402.510010,2402.510010,1948100\\n2021-05-28,2421.959961,2428.139893,2407.689941,2411.560059,2411.560059,1205400\\n2021-06-01,2422.000000,2437.970947,2404.879883,2429.810059,2429.810059,958300\\n2021-06-02,2435.310059,2442.000000,2404.199951,2421.280029,2421.280029,857900\\n2021-06-03,2395.020020,2409.745117,2382.830078,2404.610107,2404.610107,917300\\n2021-06-04,2422.520020,2453.858887,2417.770020,2451.760010,2451.760010,1295800\\n2021-06-07,2451.320068,2468.000000,2441.072998,2466.090088,2466.090088,1192500\\n2021-06-08,2479.899902,2494.495117,2468.239990,2482.850098,2482.850098,1253000\\n2021-06-09,2499.500000,2505.000000,2487.330078,2491.399902,2491.399902,1006300\\n2021-06-10,2494.010010,2523.260010,2494.000000,2521.600098,2521.600098,1561700\\n2021-06-11,2524.919922,2526.989990,2498.290039,2513.929932,2513.929932,1262000'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jDuWmGtbfHel",
        "outputId": "e297c909-5304-4226-8acc-47172e6983e3"
      },
      "source": [
        "#store the data into the DataFrame\n",
        "df = pd.read_csv('GOOG.csv')\n",
        "\n",
        "#show the dataframe \n",
        "df.head()\n",
        "\n",
        "#shape of data frame\n",
        "df.shape"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(251, 7)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SHsTL-8Vfa-e"
      },
      "source": [
        "# Pandas dataframe.rolling() function provides the feature of rolling window calculations. \n",
        "# The concept of rolling window calculation is most primarily used in signal processing and time series data. \n",
        "# In a very simple words we take a window size of k at a time and perform some desired mathematical operation on it.\n",
        "\n",
        "\n",
        "#create functions to calculate simple moving avg. and Exponential Moving Avg.\n",
        "#Typical timeperods for avg 15, 20 and 30\n",
        "#create simple moving ang.\n",
        "def SMA(data, period = 30, column='Close'):\n",
        "  return data[column].rolling(window = period).mean()\n",
        "\n",
        "#Create the Exponential Moving Ang.\n",
        "def EMA(data, period = 20, column='Close'):\n",
        "  return data[column].ewm(span=period, adjust=False).mean()"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8F3FSRMFj03N"
      },
      "source": [
        "#@title MACD { form-width: \"3px\", display-mode: \"form\" }\n",
        "#@markdown MACD\n",
        "#Create a function to create Moving Avg. Convergence / Divergence \n",
        "def MACD(data, period_long = 12, period_sort=9, period_signal=9, column=\"Close\"):\n",
        "\n",
        "  #Calculate Sort Term EMA\n",
        "  ShortEMA = EMA(data, period = period_sort, column = column)\n",
        "\n",
        "  #Calculate Long Term EMA\n",
        "  LongEMA = EMA(data, period = period_long, column = column)\n",
        "\n",
        "  #Calculate and Store MACD into DataFrame \n",
        "  data['MACD'] = ShortEMA - LongEMA\n",
        "\n",
        "  #Calculate the signal line and store it into dataframe\n",
        "\n",
        "  data['signal_line'] = EMA(data, period=period_signal, column='MACD')\n",
        "\n",
        "  return data"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iJSOe72orYll"
      },
      "source": [
        "#Create a function to calculate: The Relative Strength Index\n",
        "def RSI(data, period=14, column='Close'):\n",
        "  delta = data[column].div(1)\n",
        "  delta = delta.dropna()\n",
        "  up = delta.copy()\n",
        "  down = delta.copy()\n",
        "  up[up < 0] = 0\n",
        "  down[down > 0] = 0\n",
        "  data['up'] = up\n",
        "  data['down'] = down\n",
        "  AVG_Gain = SMA(data, period, column = 'up')\n",
        "  AVG_Loss = abs(SMA(data, period, column = 'down'))\n",
        "  RS = AVG_Gain / AVG_Loss\n",
        "  RSI = 100.0 - (100.0 / (1.0 + RS))\n",
        "\n",
        "  data['RSI'] = RSI\n",
        "  return data"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "hvntW1efyjN4",
        "outputId": "19c3223e-9dfb-4766-d6ba-0f379ee0599d"
      },
      "source": [
        "#Add the Idecators to the data set\n",
        "MACD(df)\n",
        "RSI(df)\n",
        "df['SMA'] = SMA(df)\n",
        "df['EMA'] = EMA(df)\n",
        "\n",
        "#Show the data\n",
        "df"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>MACD</th>\n",
              "      <th>signal_line</th>\n",
              "      <th>up</th>\n",
              "      <th>down</th>\n",
              "      <th>RSI</th>\n",
              "      <th>SMA</th>\n",
              "      <th>EMA</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-15</td>\n",
              "      <td>1390.800049</td>\n",
              "      <td>1424.800049</td>\n",
              "      <td>1387.920044</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>1503900</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1419.849976</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>1445.219971</td>\n",
              "      <td>1455.020020</td>\n",
              "      <td>1425.900024</td>\n",
              "      <td>1442.719971</td>\n",
              "      <td>1442.719971</td>\n",
              "      <td>1709200</td>\n",
              "      <td>1.055538</td>\n",
              "      <td>0.211108</td>\n",
              "      <td>1442.719971</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422.028071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-17</td>\n",
              "      <td>1447.160034</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1431.380005</td>\n",
              "      <td>1451.119995</td>\n",
              "      <td>1451.119995</td>\n",
              "      <td>1549600</td>\n",
              "      <td>2.125272</td>\n",
              "      <td>0.593940</td>\n",
              "      <td>1451.119995</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1424.798730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-18</td>\n",
              "      <td>1449.160034</td>\n",
              "      <td>1451.410034</td>\n",
              "      <td>1427.010010</td>\n",
              "      <td>1435.959961</td>\n",
              "      <td>1435.959961</td>\n",
              "      <td>1581900</td>\n",
              "      <td>2.084312</td>\n",
              "      <td>0.892015</td>\n",
              "      <td>1435.959961</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1425.861705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-19</td>\n",
              "      <td>1444.000000</td>\n",
              "      <td>1447.800049</td>\n",
              "      <td>1421.349976</td>\n",
              "      <td>1431.719971</td>\n",
              "      <td>1431.719971</td>\n",
              "      <td>3157900</td>\n",
              "      <td>1.796761</td>\n",
              "      <td>1.072964</td>\n",
              "      <td>1431.719971</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1426.419635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>2451.320068</td>\n",
              "      <td>2468.000000</td>\n",
              "      <td>2441.072998</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>1192500</td>\n",
              "      <td>10.680631</td>\n",
              "      <td>8.450994</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2369.308008</td>\n",
              "      <td>2387.543329</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>2021-06-08</td>\n",
              "      <td>2479.899902</td>\n",
              "      <td>2494.495117</td>\n",
              "      <td>2468.239990</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>1253000</td>\n",
              "      <td>11.863911</td>\n",
              "      <td>9.133577</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2374.511678</td>\n",
              "      <td>2396.620164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>248</th>\n",
              "      <td>2021-06-09</td>\n",
              "      <td>2499.500000</td>\n",
              "      <td>2505.000000</td>\n",
              "      <td>2487.330078</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>1006300</td>\n",
              "      <td>12.694464</td>\n",
              "      <td>9.845755</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2380.654338</td>\n",
              "      <td>2405.646806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>2021-06-10</td>\n",
              "      <td>2494.010010</td>\n",
              "      <td>2523.260010</td>\n",
              "      <td>2494.000000</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>1561700</td>\n",
              "      <td>14.259940</td>\n",
              "      <td>10.728592</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2385.377344</td>\n",
              "      <td>2416.689976</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>2021-06-11</td>\n",
              "      <td>2524.919922</td>\n",
              "      <td>2526.989990</td>\n",
              "      <td>2498.290039</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>1262000</td>\n",
              "      <td>14.526872</td>\n",
              "      <td>11.488248</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2388.178678</td>\n",
              "      <td>2425.950924</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>251 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date         Open         High  ...    RSI          SMA          EMA\n",
              "0    2020-06-15  1390.800049  1424.800049  ...    NaN          NaN  1419.849976\n",
              "1    2020-06-16  1445.219971  1455.020020  ...    NaN          NaN  1422.028071\n",
              "2    2020-06-17  1447.160034  1460.000000  ...    NaN          NaN  1424.798730\n",
              "3    2020-06-18  1449.160034  1451.410034  ...    NaN          NaN  1425.861705\n",
              "4    2020-06-19  1444.000000  1447.800049  ...    NaN          NaN  1426.419635\n",
              "..          ...          ...          ...  ...    ...          ...          ...\n",
              "246  2021-06-07  2451.320068  2468.000000  ...  100.0  2369.308008  2387.543329\n",
              "247  2021-06-08  2479.899902  2494.495117  ...  100.0  2374.511678  2396.620164\n",
              "248  2021-06-09  2499.500000  2505.000000  ...  100.0  2380.654338  2405.646806\n",
              "249  2021-06-10  2494.010010  2523.260010  ...  100.0  2385.377344  2416.689976\n",
              "250  2021-06-11  2524.919922  2526.989990  ...  100.0  2388.178678  2425.950924\n",
              "\n",
              "[251 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "UxcIvx9hzCO_",
        "outputId": "3dc3bc18-6e14-4e28-d9e1-a03416609992"
      },
      "source": [
        "#Create the target Column\n",
        "# To check if tomorrow close price is higher then the todays close price\n",
        "df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)\n",
        "df"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>MACD</th>\n",
              "      <th>signal_line</th>\n",
              "      <th>up</th>\n",
              "      <th>down</th>\n",
              "      <th>RSI</th>\n",
              "      <th>SMA</th>\n",
              "      <th>EMA</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-06-15</td>\n",
              "      <td>1390.800049</td>\n",
              "      <td>1424.800049</td>\n",
              "      <td>1387.920044</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>1503900</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1419.849976</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>1445.219971</td>\n",
              "      <td>1455.020020</td>\n",
              "      <td>1425.900024</td>\n",
              "      <td>1442.719971</td>\n",
              "      <td>1442.719971</td>\n",
              "      <td>1709200</td>\n",
              "      <td>1.055538</td>\n",
              "      <td>0.211108</td>\n",
              "      <td>1442.719971</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1422.028071</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-06-17</td>\n",
              "      <td>1447.160034</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1431.380005</td>\n",
              "      <td>1451.119995</td>\n",
              "      <td>1451.119995</td>\n",
              "      <td>1549600</td>\n",
              "      <td>2.125272</td>\n",
              "      <td>0.593940</td>\n",
              "      <td>1451.119995</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1424.798730</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-06-18</td>\n",
              "      <td>1449.160034</td>\n",
              "      <td>1451.410034</td>\n",
              "      <td>1427.010010</td>\n",
              "      <td>1435.959961</td>\n",
              "      <td>1435.959961</td>\n",
              "      <td>1581900</td>\n",
              "      <td>2.084312</td>\n",
              "      <td>0.892015</td>\n",
              "      <td>1435.959961</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1425.861705</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-06-19</td>\n",
              "      <td>1444.000000</td>\n",
              "      <td>1447.800049</td>\n",
              "      <td>1421.349976</td>\n",
              "      <td>1431.719971</td>\n",
              "      <td>1431.719971</td>\n",
              "      <td>3157900</td>\n",
              "      <td>1.796761</td>\n",
              "      <td>1.072964</td>\n",
              "      <td>1431.719971</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1426.419635</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>2451.320068</td>\n",
              "      <td>2468.000000</td>\n",
              "      <td>2441.072998</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>1192500</td>\n",
              "      <td>10.680631</td>\n",
              "      <td>8.450994</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2369.308008</td>\n",
              "      <td>2387.543329</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>2021-06-08</td>\n",
              "      <td>2479.899902</td>\n",
              "      <td>2494.495117</td>\n",
              "      <td>2468.239990</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>1253000</td>\n",
              "      <td>11.863911</td>\n",
              "      <td>9.133577</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2374.511678</td>\n",
              "      <td>2396.620164</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>248</th>\n",
              "      <td>2021-06-09</td>\n",
              "      <td>2499.500000</td>\n",
              "      <td>2505.000000</td>\n",
              "      <td>2487.330078</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>1006300</td>\n",
              "      <td>12.694464</td>\n",
              "      <td>9.845755</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2380.654338</td>\n",
              "      <td>2405.646806</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>2021-06-10</td>\n",
              "      <td>2494.010010</td>\n",
              "      <td>2523.260010</td>\n",
              "      <td>2494.000000</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>1561700</td>\n",
              "      <td>14.259940</td>\n",
              "      <td>10.728592</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2385.377344</td>\n",
              "      <td>2416.689976</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>2021-06-11</td>\n",
              "      <td>2524.919922</td>\n",
              "      <td>2526.989990</td>\n",
              "      <td>2498.290039</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>1262000</td>\n",
              "      <td>14.526872</td>\n",
              "      <td>11.488248</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2388.178678</td>\n",
              "      <td>2425.950924</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>251 rows × 15 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date         Open         High  ...          SMA          EMA  target\n",
              "0    2020-06-15  1390.800049  1424.800049  ...          NaN  1419.849976       1\n",
              "1    2020-06-16  1445.219971  1455.020020  ...          NaN  1422.028071       1\n",
              "2    2020-06-17  1447.160034  1460.000000  ...          NaN  1424.798730       0\n",
              "3    2020-06-18  1449.160034  1451.410034  ...          NaN  1425.861705       0\n",
              "4    2020-06-19  1444.000000  1447.800049  ...          NaN  1426.419635       1\n",
              "..          ...          ...          ...  ...          ...          ...     ...\n",
              "246  2021-06-07  2451.320068  2468.000000  ...  2369.308008  2387.543329       1\n",
              "247  2021-06-08  2479.899902  2494.495117  ...  2374.511678  2396.620164       1\n",
              "248  2021-06-09  2499.500000  2505.000000  ...  2380.654338  2405.646806       1\n",
              "249  2021-06-10  2494.010010  2523.260010  ...  2385.377344  2416.689976       0\n",
              "250  2021-06-11  2524.919922  2526.989990  ...  2388.178678  2425.950924       0\n",
              "\n",
              "[251 rows x 15 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "kcKkSfgD0Q-v",
        "outputId": "4c40d9ce-eb36-4e87-bfc2-a8efda99bb33"
      },
      "source": [
        "#Remove the  first 29 days of data\n",
        "df = df[29:]\n",
        "df"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>MACD</th>\n",
              "      <th>signal_line</th>\n",
              "      <th>up</th>\n",
              "      <th>down</th>\n",
              "      <th>RSI</th>\n",
              "      <th>SMA</th>\n",
              "      <th>EMA</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2020-09-04</td>\n",
              "      <td>1624.260010</td>\n",
              "      <td>1645.109985</td>\n",
              "      <td>1547.613037</td>\n",
              "      <td>1591.040039</td>\n",
              "      <td>1591.040039</td>\n",
              "      <td>2608600</td>\n",
              "      <td>9.326334</td>\n",
              "      <td>11.501490</td>\n",
              "      <td>1591.040039</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>1555.122652</td>\n",
              "      <td>1597.900887</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>2020-09-08</td>\n",
              "      <td>1533.510010</td>\n",
              "      <td>1563.864990</td>\n",
              "      <td>1528.010010</td>\n",
              "      <td>1532.390015</td>\n",
              "      <td>1532.390015</td>\n",
              "      <td>2610900</td>\n",
              "      <td>3.335500</td>\n",
              "      <td>9.868292</td>\n",
              "      <td>1532.390015</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>1555.195654</td>\n",
              "      <td>1591.661756</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>2020-09-09</td>\n",
              "      <td>1557.530029</td>\n",
              "      <td>1569.000000</td>\n",
              "      <td>1536.051025</td>\n",
              "      <td>1556.959961</td>\n",
              "      <td>1556.959961</td>\n",
              "      <td>1774700</td>\n",
              "      <td>0.311532</td>\n",
              "      <td>7.956940</td>\n",
              "      <td>1556.959961</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>1557.082987</td>\n",
              "      <td>1588.356823</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>2020-09-10</td>\n",
              "      <td>1560.640015</td>\n",
              "      <td>1584.081055</td>\n",
              "      <td>1525.805054</td>\n",
              "      <td>1532.020020</td>\n",
              "      <td>1532.020020</td>\n",
              "      <td>1618600</td>\n",
              "      <td>-2.896121</td>\n",
              "      <td>5.786328</td>\n",
              "      <td>1532.020020</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>1557.416321</td>\n",
              "      <td>1582.991414</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>2020-09-11</td>\n",
              "      <td>1536.000000</td>\n",
              "      <td>1575.199951</td>\n",
              "      <td>1497.359985</td>\n",
              "      <td>1520.719971</td>\n",
              "      <td>1520.719971</td>\n",
              "      <td>1597100</td>\n",
              "      <td>-5.499885</td>\n",
              "      <td>3.529085</td>\n",
              "      <td>1520.719971</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>1557.058655</td>\n",
              "      <td>1577.060800</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>246</th>\n",
              "      <td>2021-06-07</td>\n",
              "      <td>2451.320068</td>\n",
              "      <td>2468.000000</td>\n",
              "      <td>2441.072998</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>1192500</td>\n",
              "      <td>10.680631</td>\n",
              "      <td>8.450994</td>\n",
              "      <td>2466.090088</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2369.308008</td>\n",
              "      <td>2387.543329</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>247</th>\n",
              "      <td>2021-06-08</td>\n",
              "      <td>2479.899902</td>\n",
              "      <td>2494.495117</td>\n",
              "      <td>2468.239990</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>1253000</td>\n",
              "      <td>11.863911</td>\n",
              "      <td>9.133577</td>\n",
              "      <td>2482.850098</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2374.511678</td>\n",
              "      <td>2396.620164</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>248</th>\n",
              "      <td>2021-06-09</td>\n",
              "      <td>2499.500000</td>\n",
              "      <td>2505.000000</td>\n",
              "      <td>2487.330078</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>1006300</td>\n",
              "      <td>12.694464</td>\n",
              "      <td>9.845755</td>\n",
              "      <td>2491.399902</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2380.654338</td>\n",
              "      <td>2405.646806</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>2021-06-10</td>\n",
              "      <td>2494.010010</td>\n",
              "      <td>2523.260010</td>\n",
              "      <td>2494.000000</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>1561700</td>\n",
              "      <td>14.259940</td>\n",
              "      <td>10.728592</td>\n",
              "      <td>2521.600098</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2385.377344</td>\n",
              "      <td>2416.689976</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>2021-06-11</td>\n",
              "      <td>2524.919922</td>\n",
              "      <td>2526.989990</td>\n",
              "      <td>2498.290039</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>1262000</td>\n",
              "      <td>14.526872</td>\n",
              "      <td>11.488248</td>\n",
              "      <td>2513.929932</td>\n",
              "      <td>0.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2388.178678</td>\n",
              "      <td>2425.950924</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>193 rows × 15 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Date         Open         High  ...          SMA          EMA  target\n",
              "58   2020-09-04  1624.260010  1645.109985  ...  1555.122652  1597.900887       0\n",
              "59   2020-09-08  1533.510010  1563.864990  ...  1555.195654  1591.661756       1\n",
              "60   2020-09-09  1557.530029  1569.000000  ...  1557.082987  1588.356823       0\n",
              "61   2020-09-10  1560.640015  1584.081055  ...  1557.416321  1582.991414       0\n",
              "62   2020-09-11  1536.000000  1575.199951  ...  1557.058655  1577.060800       0\n",
              "..          ...          ...          ...  ...          ...          ...     ...\n",
              "246  2021-06-07  2451.320068  2468.000000  ...  2369.308008  2387.543329       1\n",
              "247  2021-06-08  2479.899902  2494.495117  ...  2374.511678  2396.620164       1\n",
              "248  2021-06-09  2499.500000  2505.000000  ...  2380.654338  2405.646806       1\n",
              "249  2021-06-10  2494.010010  2523.260010  ...  2385.377344  2416.689976       0\n",
              "250  2021-06-11  2524.919922  2526.989990  ...  2388.178678  2425.950924       0\n",
              "\n",
              "[193 rows x 15 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CJv_bILR0SQG"
      },
      "source": [
        "#split the data into a feature or indepandent data set called X or depandent or target y\n",
        "keep_column = ['Close', 'MACD', 'signal_line', 'RSI', 'SMA', 'EMA']\n",
        "X = df[keep_column].values\n",
        "y = df['target'].values"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fG-SQamb1Mrv",
        "outputId": "fc1ae2ba-da3d-414b-f2b8-7604fb438a82"
      },
      "source": [
        "X"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.59104004e+03, 9.32633442e+00, 1.15014898e+01, 1.00000000e+02,\n",
              "        1.55512265e+03, 1.59790089e+03],\n",
              "       [1.53239001e+03, 3.33549954e+00, 9.86829177e+00, 1.00000000e+02,\n",
              "        1.55519565e+03, 1.59166176e+03],\n",
              "       [1.55695996e+03, 3.11531910e-01, 7.95693980e+00, 1.00000000e+02,\n",
              "        1.55708299e+03, 1.58835682e+03],\n",
              "       ...,\n",
              "       [2.49139990e+03, 1.26944636e+01, 9.84575462e+00, 1.00000000e+02,\n",
              "        2.38065434e+03, 2.40564681e+03],\n",
              "       [2.52160010e+03, 1.42599399e+01, 1.07285917e+01, 1.00000000e+02,\n",
              "        2.38537734e+03, 2.41668998e+03],\n",
              "       [2.51392993e+03, 1.45268720e+01, 1.14882477e+01, 1.00000000e+02,\n",
              "        2.38817868e+03, 2.42595092e+03]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oGDXL6D41RBa"
      },
      "source": [
        "#split the data again but this time into training and testing data set\n",
        "x_tain, x_test, y_train, y_test = train_test_split(X, y, test_size = 20, random_state = 2)\n"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5jOmIsNO1tgL"
      },
      "source": [
        "#create and train the decision tree classifier Model\n",
        "tree = DecisionTreeClassifier().fit(x_tain, y_train)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GeOe7vT01_ts",
        "outputId": "33e1fbaf-b1b1-4d31-f389-203856b61ca6"
      },
      "source": [
        "#Check how well the Model did on tree data set\n",
        "print(tree.score(x_tain, y_train))"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FljWVYU92PZJ",
        "outputId": "21cc1b83-082a-4fe3-fe14-b65f916ce27a"
      },
      "source": [
        "#check how well the Model did on testing Data set\n",
        "print(tree.score(x_test, y_test))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.45\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3APeM4ce2eKp",
        "outputId": "7225f44a-0e23-4079-ad3b-26350c3b58d7"
      },
      "source": [
        "#Show the model tree Prediction\n",
        "tree_Prediction = tree.predict(x_test)\n",
        "print(tree_Prediction)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 1 1 0 0 1 0 1 1 1 0 1 0 1 1 0 1 0 1 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pjyufMX82yRu",
        "outputId": "1cc5ce6e-6118-4896-c9d7-818b376c21c5"
      },
      "source": [
        "#show the actual value from test data\n",
        "y_test"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pBpGuEz927tz",
        "outputId": "add4bcb9-e4b9-4d73-df7c-fc3cb86191a8"
      },
      "source": [
        "#Get some More MAtrix\n",
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test, tree_Prediction))"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.29      0.25      0.27         8\n",
            "           1       0.54      0.58      0.56        12\n",
            "\n",
            "    accuracy                           0.45        20\n",
            "   macro avg       0.41      0.42      0.41        20\n",
            "weighted avg       0.44      0.45      0.44        20\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.29      0.25      0.27         8\n",
            "           1       0.54      0.58      0.56        12\n",
            "\n",
            "    accuracy                           0.45        20\n",
            "   macro avg       0.41      0.42      0.41        20\n",
            "weighted avg       0.44      0.45      0.44        20\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}